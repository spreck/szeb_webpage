events {
    worker_connections 1024;
}

http {
    # Custom log format definition
    log_format custom '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log custom;

    include       mime.types;
    default_type  application/octet-stream;
    sendfile      on;

    # Define upstream for each service
    upstream cone_app {
        server cone-app:8000;
    }

    upstream geoserver {
        server geoserver:8080;
    }

    upstream mdb_service {
        server mdb_service:5001;
    }
	
	upstream grafana {
        server grafana:3000;
    }


    server {
        listen 80;
        server_name localhost;

        # Global CORS Headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

        # Handle OPTIONS requests globally
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        # Debug route to echo remote address (remove once done)
        # location /debug_remote_addr {
            # default_type text/plain;
            # return 200 "$remote_addr\n";
        # }
		# Proxy requests to Grafana
        location /grafana/ {
            proxy_pass http://grafana/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }


        # Proxy requests to the Flask app
        location / {
            proxy_pass http://cone-app:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            include proxy_params;
        }

        # Proxy requests to GeoServer
        location /geoserver/ {
            proxy_pass http://geoserver/geoserver/;
            include proxy_params;
        }

        # Proxy requests to the mdb_service for /get_all_city_data
        location /get_all_city_data {
            proxy_pass http://mdb_service/get_all_city_data;
            include proxy_params;
        }

        # Proxy requests to the mdb_service for /get_city_data
        location /get_city_data {
            proxy_pass http://mdb_service/get_city_data;
            include proxy_params;
        }

        # Restrict and proxy Prometheus metric scrapes to the Flask application
        location /metrics {
            # Allow only localhost and the Docker host IP (adjust as needed)
            allow 127.0.0.1;
            allow ::1;
            allow 172.23.0.1;  # For example, your Docker host's IP as seen by the container
            deny all;

            proxy_pass http://cone-app:8000/metrics;
            include proxy_params;
        }
    }

    # Common Proxy Settings
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
	


    # Include proxy settings for reuse
    include /etc/nginx/proxy_params;
}
