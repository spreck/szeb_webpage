events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile      on;

    # Define upstream for each service
    upstream cone_app {
        server cone-app:8000;
    }

    upstream geoserver {
        server geoserver:8080;
    }

    upstream mdb_service {
        server mdb_service:5001;
    }

    server {
        listen 80;
        server_name localhost;

        # Global CORS Headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

        # Handle OPTIONS requests globally
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        # Proxy requests to the Flask app
        location / {
			proxy_pass http://cone-app:8000;
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			include proxy_params;
		}

        # Proxy requests to GeoServer
        location /geoserver/ {
            proxy_pass http://geoserver/geoserver/;
            include proxy_params;
        }

        # Proxy requests to the mdb_service for /get_all_city_data
        location /get_all_city_data {
            proxy_pass http://mdb_service/get_all_city_data;
            include proxy_params;
        }

        # Proxy requests to the mdb_service for /get_city_data
        location /get_city_data {
            proxy_pass http://mdb_service/get_city_data;
            include proxy_params;
        }

        # Proxy Prometheus metric scrapes to the Flask application
        location /metrics {
            proxy_pass http://cone-app:5001/metrics;
            include proxy_params;
        }
    }

    # Common Proxy Settings
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Include proxy settings for reuse
    include /etc/nginx/proxy_params;
}
