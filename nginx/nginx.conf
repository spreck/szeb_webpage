events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile      on;

    # Define upstream for each service
    upstream cone_app {
        server cone-app:8000;
    }

    upstream geoserver {
        server geoserver:8080;
    }

    # HTTP server - redirects to HTTPS and handles Let's Encrypt challenges
    server {
        listen 80;
        server_name conescout.duckdns.org;
        
        # Allow certbot challenges
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        # Redirect all HTTP traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS server
    server {
        listen 443 ssl;
        server_name conescout.duckdns.org;
        
        # SSL certificates
        ssl_certificate /etc/letsencrypt/live/conescout.duckdns.org/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/conescout.duckdns.org/privkey.pem;
        
        # Flask application
        location / {
            proxy_pass http://cone_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }
        
        # GeoServer
        location /geoserver/ {
            proxy_pass http://geoserver/geoserver/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }
    }
}
